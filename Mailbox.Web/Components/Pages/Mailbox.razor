@page "/mailbox"
@using global::Mailbox.Contracts
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject MailBoxApiClient MailBoxApi

<PageTitle>Mailbox</PageTitle>

<h3>Mailbox</h3>

<!-- Email List -->
<table class="table table-bordered">
    <thead>
        <tr>
            <th>From</th>
            <th>Subject</th>
            <th>Date</th>
        </tr>
    </thead>
    <tbody>
        @if (_emails.Any())
        {
            @foreach (var email in _emails)
            {
                <tr>
                    <td>@email.Subject</td>
                    <td>@DateTime.Now.ToString("g")</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="3" class="text-center">No emails available.</td>
            </tr>
        }
    </tbody>
</table>

<!-- Send Email Button -->
@* <button class="btn btn-primary" @onclick="OpenComposeEmail">New Email</button> *@

<!-- Compose Email Modal -->
@* @if (IsComposeModalVisible) *@
@* { *@
@*     <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);"> *@
@*         <div class="modal-dialog"> *@
@*             <div class="modal-content"> *@
@*                 <div class="modal-header"> *@
@*                     <h5 class="modal-title">Compose Email</h5> *@
@*                     <button type="button" class="btn-close" aria-label="Close" @onclick="CloseComposeEmail"></button> *@
@*                 </div> *@
@*                 <div class="modal-body"> *@
@*                     <div class="mb-3"> *@
@*                         <label for="toInput" class="form-label">To</label> *@
@*                         <input type="email" class="form-control" id="toInput" @bind="NewEmail.To" /> *@
@*                     </div> *@
@*                     <div class="mb-3"> *@
@*                         <label for="subjectInput" class="form-label">Subject</label> *@
@*                         <input type="text" class="form-control" id="subjectInput" @bind="NewEmail.Subject" /> *@
@*                     </div> *@
@*                     <div class="mb-3"> *@
@*                         <label for="bodyInput" class="form-label">Body</label> *@
@*                         <textarea class="form-control" id="bodyInput" rows="3" @bind="NewEmail.Body"></textarea> *@
@*                     </div> *@
@*                 </div> *@
@*                 <div class="modal-footer"> *@
@*                     <button class="btn btn-secondary" @onclick="CloseComposeEmail">Cancel</button> *@
@*                     <button class="btn btn-primary" @onclick="SendEmail">Send</button> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* } *@

@code {
    private bool _isComposeModalVisible = false;
    
    private List<Email> _emails = new();

    protected override async Task OnInitializedAsync()
    {
        _emails = await MailBoxApi.GetEmailsAsync();
    }

    // Email being composed
    //private Email NewEmail = new Email();

    // // Open the compose email modal
    // private void OpenComposeEmail()
    // {
    //     NewEmail = new Email(); // Reset the form
    //     IsComposeModalVisible = true;
    // }
    //
    // // Close the compose email modal
    // private void CloseComposeEmail()
    // {
    //     IsComposeModalVisible = false;
    // }
    //
    // // Simulate sending the email
    // private void SendEmail()
    // {
    //     if (!string.IsNullOrWhiteSpace(NewEmail.To) && !string.IsNullOrWhiteSpace(NewEmail.Subject))
    //     {
    //         // Add the new email to the mailbox (as if it's sent)
    //         Emails.Add(new Email
    //         {
    //             //From = "user@example.com", // Assume the logged-in user's email
    //             To = NewEmail.To,
    //             Subject = NewEmail.Subject,
    //             Body = NewEmail.Body,
    //             //ReceivedDate = DateTime.Now
    //         });
    //     }
    //
    //     CloseComposeEmail();
    }
}